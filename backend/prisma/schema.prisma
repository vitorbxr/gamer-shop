generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  password    String
  name        String
  role        String      @default("USER")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orders      Order[]
  addresses   Address[]   // Adicionado relação com endereços
}

model Product {
  id              Int         @id @default(autoincrement())
  name            String
  description     String?     @db.Text
  price           Float
  stock           Int         @default(0)
  isActive        Boolean     @default(true)
  image           String?
  specifications  String?     @db.Text
  features        String?     @db.Text
  categoryId      Int?
  brandId         Int?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  category        Category?   @relation(fields: [categoryId], references: [id])
  brand           Brand?      @relation(fields: [brandId], references: [id])
  orderItems      OrderItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
}

model Brand {
  id        Int       @id @default(autoincrement())
  name      String
  products  Product[]
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  payment     Payment?
  shipping    Shipping?
  
  discountAmount Float?    // Para cupons de desconto
  couponCode     String?   // Código do cupom usado
}

enum OrderStatus {
  PENDING
  PROCESSING
  AWAITING_PAYMENT
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float    // Preço no momento da compra

  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Payment {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  amount        Float
  currency      String        @default("EUR")  // Alterado para EUR
  
  // Campos para Multibanco
  entity        String?       // Entidade
  reference     String?       // Referência
  
  // Campos para cartão
  lastDigits    String?       // Últimos 4 dígitos do cartão
  installments  Int?          // Parcelas (se aplicável)
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order         Order         @relation(fields: [orderId], references: [id])
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  MBWAY
  MULTIBANCO
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

model Shipping {
  id            Int           @id @default(autoincrement())
  orderId       Int           @unique
  method        ShippingMethod
  status        ShippingStatus @default(PENDING)
  address       String        // Endereço completo
  postalCode    String        // Código postal português
  city          String
  district      String        // Distrito em Portugal
  country       String        @default("Portugal")
  cost          Float
  trackingCode  String?       // Código de rastreio CTT
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order         Order         @relation(fields: [orderId], references: [id])
}

enum ShippingMethod {
  CTT_NORMAL
  CTT_EXPRESS
}

enum ShippingStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
}

model Address {
  id          Int       @id @default(autoincrement())
  userId      Int
  street      String
  number      String
  complement  String?
  district    String    // Distrito em Portugal
  city        String
  postalCode  String    // Código postal português
  country     String    @default("Portugal")
  isDefault   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id])
}

model Coupon {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  discount    Float     // Valor do desconto em porcentagem
  type        CouponType
  value       Float     // Valor do desconto (fixo ou percentual)
  minValue    Float?    // Valor mínimo da compra
  maxUses     Int?      // Número máximo de usos
  usedCount   Int       @default(0)
  startDate   DateTime  // Data de início da validade
  endDate     DateTime  // Data de fim da validade
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]   // Relação com pedidos que usaram este cupom
}

enum CouponType {
  PERCENTAGE  // Desconto percentual
  FIXED       // Valor fixo
}